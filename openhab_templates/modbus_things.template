<%!  
    import re
%>
${tcp(**tcp_data)} 
<%self:embrace>
    % for type, req_data in requests_data.items():
        <%  
            type = re.sub("\d","",type)
            poller_args = {
                'id': req_data['id'],
                'name': type,
                'start': req_data['vars'][0]['addr'],
                'length': req_data['vars'][-1]['addr'] - req_data['vars'][0]['addr'] + req_data['vars'][-1]['size'],
                'type': type
            }
        %>
        ${poller(**poller_args)} 
        <%self:embrace>
            % for var in req_data['vars']:
                % if (type.startswith('coil') or type.startswith('holding')):
                <%
                    var_args = {
                        'id': var['id'],
                        'name': var['name'],
                        'writeStart': var['addr'],
                        'writeValueType': var['type'],
                        'writeType': type
                    }
                %>
                ${data_writer(**var_args)}
                % else:
                <%
                    var_args = {
                        'id': var['id'],
                        'name': var['name'],
                        'readStart': var['addr'],
                        'readValueType': var['type'],
                    }
                %>
                ${data_reader(**var_args)}
                % endif
            % endfor
        </%self:embrace>    
    % endfor
</%self:embrace>

<%def name="embrace()">
{ 
    ${caller.body()} 
} 
</%def>

<%def name="tcp(host, port, id, name)">
Bridge modbus:tcp:${name} "${name}" [host="${host}", port=${port}, id=${id}, reconnectAfterMillis=120000] \
</%def>

<%def name="poller(id, name, start, length, type)">
    Bridge poller ${id} "${name}" [start=${start}, length=${length}, type="${type}"] \
</%def>

<%def name="data_reader(id, name, readStart, readValueType)">
        Thing data ${id} "${name}" [readStart="${readStart}", readValueType="${readValueType}"] \
</%def>

<%def name="data_writer(id, name, writeStart, writeValueType, writeType)">
        Thing data ${id} "${name}" [writeStart="${writeStart}", writeValueType="${writeValueType}", writeType="${writeType}"] \
</%def>


